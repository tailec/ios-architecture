//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `aquaman`.
    static let aquaman = Rswift.ImageResource(bundle: R.hostingBundle, name: "aquaman")
    /// Image `back_arrow`.
    static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
    /// Image `sample`.
    static let sample = Rswift.ImageResource(bundle: R.hostingBundle, name: "sample")
    /// Image `search_icon`.
    static let search_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_icon")
    /// Image `star_icon`.
    static let star_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aquaman", bundle: ..., traitCollection: ...)`
    static func aquaman(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aquaman, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
    static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sample", bundle: ..., traitCollection: ...)`
    static func sample(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sample, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_icon", bundle: ..., traitCollection: ...)`
    static func search_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star_icon", bundle: ..., traitCollection: ...)`
    static func star_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_icon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `CarouselSectionCell`.
    static let carouselSectionCell = _R.nib._CarouselSectionCell()
    /// Nib `DiscoverMainView`.
    static let discoverMainView = _R.nib._DiscoverMainView()
    /// Nib `MovieCell`.
    static let movieCell = _R.nib._MovieCell()
    /// Nib `MovieDetailHeaderView`.
    static let movieDetailHeaderView = _R.nib._MovieDetailHeaderView()
    /// Nib `MovieDetailTipsView`.
    static let movieDetailTipsView = _R.nib._MovieDetailTipsView()
    /// Nib `SearchCell`.
    static let searchCell = _R.nib._SearchCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CarouselSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.carouselSectionCell) instead")
    static func carouselSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.carouselSectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiscoverMainView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.discoverMainView) instead")
    static func discoverMainView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.discoverMainView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieCell) instead")
    static func movieCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieDetailHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieDetailHeaderView) instead")
    static func movieDetailHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieDetailHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieDetailTipsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieDetailTipsView) instead")
    static func movieDetailTipsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieDetailTipsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchCell) instead")
    static func searchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchCell)
    }
    #endif

    static func carouselSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CarouselSectionCell? {
      return R.nib.carouselSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CarouselSectionCell
    }

    static func discoverMainView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.discoverMainView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func movieCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieCell? {
      return R.nib.movieCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieCell
    }

    static func movieDetailHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.movieDetailHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func movieDetailTipsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.movieDetailTipsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchCell? {
      return R.nib.searchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CarouselSectionCell`.
    static let carouselSectionCell: Rswift.ReuseIdentifier<CarouselSectionCell> = Rswift.ReuseIdentifier(identifier: "CarouselSectionCell")
    /// Reuse identifier `MovieCell`.
    static let movieCell: Rswift.ReuseIdentifier<MovieCell> = Rswift.ReuseIdentifier(identifier: "MovieCell")
    /// Reuse identifier `SearchCell`.
    static let searchCell: Rswift.ReuseIdentifier<SearchCell> = Rswift.ReuseIdentifier(identifier: "SearchCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MovieCell.validate()
      try _MovieDetailHeaderView.validate()
    }

    struct _CarouselSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CarouselSectionCell

      let bundle = R.hostingBundle
      let identifier = "CarouselSectionCell"
      let name = "CarouselSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CarouselSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CarouselSectionCell
      }

      fileprivate init() {}
    }

    struct _DiscoverMainView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DiscoverMainView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MovieCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MovieCell

      let bundle = R.hostingBundle
      let identifier = "MovieCell"
      let name = "MovieCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sample", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sample' is used in nib 'MovieCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MovieDetailHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MovieDetailHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "star_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_icon' is used in nib 'MovieDetailHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MovieDetailTipsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MovieDetailTipsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SearchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchCell

      let bundle = R.hostingBundle
      let identifier = "SearchCell"
      let name = "SearchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController

      let bundle = R.hostingBundle
      let discoverViewController = StoryboardViewControllerResource<DiscoverViewController>(identifier: "DiscoverViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let movieDetailViewController = StoryboardViewControllerResource<MovieDetailViewController>(identifier: "MovieDetailViewController")
      let name = "Main"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")

      func discoverViewController(_: Void = ()) -> DiscoverViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: discoverViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func movieDetailViewController(_: Void = ()) -> MovieDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieDetailViewController)
      }

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "aquaman", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'aquaman' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().discoverViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'discoverViewController' could not be loaded from storyboard 'Main' as 'DiscoverViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().movieDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieDetailViewController' could not be loaded from storyboard 'Main' as 'MovieDetailViewController'.") }
        if _R.storyboard.main().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Main' as 'SearchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
